
package com.library.ui;

import com.library.controller.LibraryController;
import com.library.model.Book;
import com.library.model.Member;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class MainFrame extends JFrame {
	
    private LibraryController controller;
    // Pencere kapanırken verileri kaydetme dinleyicisi
    private void setupWindowCloseListener() {
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                // Programdan çıkarken verileri kaydet
                boolean saved = controller.saveData();
                if (!saved) {
                    JOptionPane.showMessageDialog(
                        MainFrame.this,
                        "Veriler kaydedilirken sorun oluştu!",
                        "Kaydetme Hatası",
                        JOptionPane.WARNING_MESSAGE
                    );
                }
                // Normal kapanış işlemine devam et
                System.exit(0);
            }
        });
    }
    
    // ... (Diğer metotlar aynı kalır)
}
    
    private JTabbedPane tabbedPane;
    
    // Book Panel components
    private JPanel bookPanel;
    private JTextField bookIdField, bookTitleField, bookAuthorField, bookSearchField;
    private JButton addBookButton, listBooksButton, deleteBookButton, searchBookButton;
    private JTextArea bookTextArea;
    
    // Member Panel components
    private JPanel memberPanel;
    private JTextField memberIdField, memberNameField, memberEmailField, memberSearchField;
    private JButton addMemberButton, listMembersButton, deleteMemberButton, searchMemberButton;
    private JTextArea memberTextArea;
    
    // Transaction Panel components (unchanged)
    private JPanel transactionPanel;
    private JTextField borrowBookIdField, borrowMemberIdField;
    private JButton borrowButton, returnButton;
    private JTextArea transactionTextArea;
    
    public MainFrame() {
        try {
            this.controller = new LibraryController();
            initializeUI();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, 
                "Veritabanı yüklenemedi: " + e.getMessage(),
                "Kritik Hata",
                JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
        controller = new LibraryController();
        initializeUI();
    }
    
    private void initializeUI() {
        setTitle("Library Management System");
        setSize(1000, 700); 
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        
        tabbedPane = new JTabbedPane();
        
        createBookPanel();
        createMemberPanel();
        createTransactionPanel();
        
        tabbedPane.addTab("Book Management", bookPanel);
        tabbedPane.addTab("Member Management", memberPanel);
        tabbedPane.addTab("Transactions", transactionPanel);
        
        add(tabbedPane);
    }

    // ================== BOOK PANEL ================== //
    private void createBookPanel() {
        bookPanel = new JPanel(new BorderLayout());
        
        // Form panel
        JPanel formPanel = new JPanel(new GridLayout(5, 2, 5, 5));
        formPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        formPanel.add(new JLabel("Book ID:"));
        bookIdField = new JTextField();
        formPanel.add(bookIdField);
        
        formPanel.add(new JLabel("Title:"));
        bookTitleField = new JTextField();
        formPanel.add(bookTitleField);
        
        formPanel.add(new JLabel("Author:"));
        bookAuthorField = new JTextField();
        formPanel.add(bookAuthorField);
        
        formPanel.add(new JLabel("Search (ID/Title):"));
        bookSearchField = new JTextField();
        formPanel.add(bookSearchField);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new GridLayout(1, 4, 5, 5));
        addBookButton = new JButton("Add Book");
        listBooksButton = new JButton("List All");
        deleteBookButton = new JButton("Delete");
        searchBookButton = new JButton("Search");
        
        buttonPanel.add(addBookButton);
        buttonPanel.add(listBooksButton);
        buttonPanel.add(deleteBookButton);
        buttonPanel.add(searchBookButton);
        
        formPanel.add(buttonPanel);
        
        // Text area
        bookTextArea = new JTextArea();
        bookTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(bookTextArea);
        
        // Panel layout
        bookPanel.add(formPanel, BorderLayout.NORTH);
        bookPanel.add(scrollPane, BorderLayout.CENTER);
        
        // Event listeners
        addBookButton.addActionListener(e -> addBook());
        listBooksButton.addActionListener(e -> listBooks());
        deleteBookButton.addActionListener(e -> deleteBook());
        searchBookButton.addActionListener(e -> performBookSearch());
    }
    
    private void addBook() {
        String id = bookIdField.getText().trim();
        String title = bookTitleField.getText().trim();
        String author = bookAuthorField.getText().trim();
        
        if (id.isEmpty() || title.isEmpty() || author.isEmpty()) {
            showError("Please fill all fields!");
            return;
        }
        
        controller.addBook(new Book(id, title, author));
        showSuccess("Book added successfully!");
        clearBookFields();
        listBooks();
    }
    
    private void deleteBook() {
        String id = bookIdField.getText().trim();
        
        if (id.isEmpty()) {
            showError("Please enter book ID!");
            return;
        }
        
        if (controller.deleteBook(id)) {
            showSuccess("Book deleted successfully!");
            clearBookFields();
            listBooks();
        } else {
            showError("Book not found or could not be deleted!");
        }
    }
    
    private void performBookSearch() {
        String query = bookSearchField.getText().trim().toLowerCase();
        
        if (query.isEmpty()) {
            showError("Lütfen arama için kitap ID, başlık veya yazar giriniz!");
            return;
        }
        
        List<Book> results = controller.searchBooks(query);
        
        if (results.isEmpty()) {
            showInfo("Arama Sonucu", "Aranan kriterlere uygun kitap bulunamadı: " + query);
            bookTextArea.setText("Sonuç bulunamadı.");
            return;
        }
        
        StringBuilder sb = new StringBuilder("Arama Sonuçları:\n\n");
        
        for (Book book : results) {
            sb.append(formatBook(book)).append("\n");
        }
        
        bookTextArea.setText(sb.toString());
        
        // Eğer tam olarak bir kitap ID'si ile arama yapıldıysa, o kitabın durumunu popup ile göster
        Book exactBook = controller.getBookById(query);
        if (exactBook != null) {
            String status = exactBook.isAvailable() ? "MEVCUT" : "ÖDÜNÇ ALINMIŞ";
            String message = String.format(
                "Kitap ID: %s\nBaşlık: %s\nYazar: %s\nDurum: %s",
                exactBook.getId(),
                exactBook.getTitle(),
                exactBook.getAuthor(),
                status
            );
            showInfo("Kitap Durumu", message);
        } else if (results.size() == 1) {
            // Eğer sadece tek bir sonuç varsa, onun detaylarını göster
            Book singleBook = results.get(0);
            String status = singleBook.isAvailable() ? "MEVCUT" : "ÖDÜNÇ ALINMIŞ";
            String message = String.format(
                "Kitap ID: %s\nBaşlık: %s\nYazar: %s\nDurum: %s",
                singleBook.getId(),
                singleBook.getTitle(),
                singleBook.getAuthor(),
                status
            );
            showInfo("Kitap Durumu", message);
        } else {
            // Birden fazla sonuç varsa, kaç sonuç bulunduğunu bildir
            showInfo("Arama Sonucu", results.size() + " kitap bulundu.");
        }
    }
    
    private String formatBook(Book book) {
        return String.format("ID: %s\nTitle: %s\nAuthor: %s\nStatus: %s\n",
            book.getId(),
            book.getTitle(),
            book.getAuthor(),
            book.isAvailable() ? "Available" : "Borrowed");
    }

    // ================== MEMBER PANEL ================== //
    private void createMemberPanel() {
        memberPanel = new JPanel(new BorderLayout());
        
        // Form panel
        JPanel formPanel = new JPanel(new GridLayout(5, 2, 5, 5));
        formPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        formPanel.add(new JLabel("Member ID:"));
        memberIdField = new JTextField();
        formPanel.add(memberIdField);
        
        formPanel.add(new JLabel("Full Name:"));
        memberNameField = new JTextField();
        formPanel.add(memberNameField);
        
        formPanel.add(new JLabel("Email:"));
        memberEmailField = new JTextField();
        formPanel.add(memberEmailField);
        
        formPanel.add(new JLabel("Search (ID/Name):"));
        memberSearchField = new JTextField();
        formPanel.add(memberSearchField);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new GridLayout(1, 4, 5, 5));
        addMemberButton = new JButton("Add Member");
        listMembersButton = new JButton("List All");
        deleteMemberButton = new JButton("Delete");
        searchMemberButton = new JButton("Search");
        
        buttonPanel.add(addMemberButton);
        buttonPanel.add(listMembersButton);
        buttonPanel.add(deleteMemberButton);
        buttonPanel.add(searchMemberButton);
        
        formPanel.add(buttonPanel);
        
        // Text area
        memberTextArea = new JTextArea();
        memberTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(memberTextArea);
        
        // Panel layout
        memberPanel.add(formPanel, BorderLayout.NORTH);
        memberPanel.add(scrollPane, BorderLayout.CENTER);
        
        // Event listeners
        addMemberButton.addActionListener(e -> addMember());
        listMembersButton.addActionListener(e -> listMembers());
        deleteMemberButton.addActionListener(e -> deleteMember());
        searchMemberButton.addActionListener(e -> performMemberSearch());
    }
    
    private void deleteMember() {
        String id = memberIdField.getText().trim();
        
        if (id.isEmpty()) {
            showError("Please enter member ID!");
            return;
        }
        
        if (controller.deleteMember(id)) {
            showSuccess("Member deleted successfully!");
            clearMemberFields();
            listMembers();
        } else {
            showError("Member not found or could not be deleted!");
        }
    }
    

    private void performMemberSearch() {
        String query = memberSearchField.getText().trim().toLowerCase();
        
        if (query.isEmpty()) {
            showError("Lütfen arama için üye ID, isim veya e-posta giriniz!");
            return;
        }
        
        List<Member> results = controller.searchMembers(query);
        
        if (results.isEmpty()) {
            showInfo("Arama Sonucu", "Aranan kriterlere uygun üye bulunamadı: " + query);
            memberTextArea.setText("Sonuç bulunamadı.");
            return;
        }
        
        StringBuilder sb = new StringBuilder("Arama Sonuçları:\n\n");
        
        for (Member member : results) {
            sb.append(formatMember(member)).append("\n");
        }
        
        memberTextArea.setText(sb.toString());
        
        // Eğer tam olarak bir üye ID'si ile arama yapıldıysa, o üyenin bilgilerini popup ile göster
        Member exactMember = controller.getMemberById(query);
        if (exactMember != null) {
            String message = String.format(
                "Üye ID: %s\nİsim: %s\nE-posta: %s",
                exactMember.getId(),
                exactMember.getName(),
                exactMember.getEmail()
            );
            showInfo("Üye Bilgisi", message);
        } else if (results.size() == 1) {
            // Eğer sadece tek bir sonuç varsa, onun detaylarını göster
            Member singleMember = results.get(0);
            String message = String.format(
                "Üye ID: %s\nİsim: %s\nE-posta: %s",
                singleMember.getId(),
                singleMember.getName(),
                singleMember.getEmail()
            );
            showInfo("Üye Bilgisi", message);
        } else {
            // Birden fazla sonuç varsa, kaç sonuç bulunduğunu bildir
            showInfo("Arama Sonucu", results.size() + " üye bulundu.");
        }
    }


    // MainFrame.java sınıfına aşağıdaki yeni metodu ekleyin:
    private void showInfo(String title, String message) {
        JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
    }
    
    private String formatMember(Member member) {
        return String.format("ID: %s\nName: %s\nEmail: %s\n",
            member.getId(),
            member.getName(),
            member.getEmail());
    }

    // ================== HELPER METHODS ================== //
    private void showError(String message) {
        JOptionPane.showMessageDialog(this, message, "Error", JOptionPane.ERROR_MESSAGE);
    }
    
    private void showSuccess(String message) {
        JOptionPane.showMessageDialog(this, message, "Success", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void clearBookFields() {
        bookIdField.setText("");
        bookTitleField.setText("");
        bookAuthorField.setText("");
    }
    
    private void clearMemberFields() {
        memberIdField.setText("");
        memberNameField.setText("");
        memberEmailField.setText("");
    }

    // ... (Keep existing transaction panel and other unchanged methods) ...

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MainFrame().setVisible(true));
    }
 // ================== EKSİK METODLAR ================== //

    private void addMember() {
        String id = memberIdField.getText().trim();
        String name = memberNameField.getText().trim();
        String email = memberEmailField.getText().trim();
        
        if (id.isEmpty() || name.isEmpty() || email.isEmpty()) {
            showError("Please fill all fields!");
            return;
        }
        
        controller.addMember(new Member(id, name, email));
        showSuccess("Member added successfully!");
        clearMemberFields();
        listMembers();
    }

    private void listBooks() {
        List<Book> books = controller.getAllBooks();
        StringBuilder sb = new StringBuilder("All Books:\n\n");
        
        for (Book book : books) {
            sb.append(formatBook(book)).append("\n");
        }
        
        bookTextArea.setText(sb.toString());
    }

    private void listMembers() {
        List<Member> members = controller.getAllMembers();
        StringBuilder sb = new StringBuilder("All Members:\n\n");
        
        for (Member member : members) {
            sb.append(formatMember(member)).append("\n");
        }
        
        memberTextArea.setText(sb.toString());
    }

    private void createTransactionPanel() {
        transactionPanel = new JPanel(new BorderLayout());
        
        // Form panel
        JPanel formPanel = new JPanel(new GridLayout(3, 2, 5, 5));
        formPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        formPanel.add(new JLabel("Book ID:"));
        borrowBookIdField = new JTextField();
        formPanel.add(borrowBookIdField);
        
        formPanel.add(new JLabel("Member ID:"));
        borrowMemberIdField = new JTextField();
        formPanel.add(borrowMemberIdField);
        
        // Buttons
        JPanel buttonPanel = new JPanel(new GridLayout(1, 2, 5, 5));
        borrowButton = new JButton("Borrow Book");
        returnButton = new JButton("Return Book");
        
        buttonPanel.add(borrowButton);
        buttonPanel.add(returnButton);
        
        formPanel.add(buttonPanel);
        
        // Text area
        transactionTextArea = new JTextArea();
        transactionTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(transactionTextArea);
        
        // Panel layout
        transactionPanel.add(formPanel, BorderLayout.NORTH);
        transactionPanel.add(scrollPane, BorderLayout.CENTER);
        
        // Event listeners
        borrowButton.addActionListener(e -> borrowBook());
        returnButton.addActionListener(e -> returnBook());
    }

    private void borrowBook() {
        String bookId = borrowBookIdField.getText().trim();
        String memberId = borrowMemberIdField.getText().trim();
        
        if (bookId.isEmpty() || memberId.isEmpty()) {
            showError("Please enter both book ID and member ID!");
            return;
        }
        
        if (controller.borrowBook(bookId)) {
            showSuccess("Book borrowed successfully!");
            transactionTextArea.append("Book " + bookId + " borrowed by member " + memberId + "\n");
            listBooks(); // Refresh book list
        } else {
            showError("Book not available or not found!");
        }
    }

    private void returnBook() {
        String bookId = borrowBookIdField.getText().trim();
        
        if (bookId.isEmpty()) {
            showError("Please enter book ID!");
            return;
        }
        
        if (controller.returnBook(bookId)) {
            showSuccess("Book returned successfully!");
            transactionTextArea.append("Book " + bookId + " returned\n");
            listBooks(); // Refresh book list
        } else {
            showError("Book not found or already available!");
        }
    }
}