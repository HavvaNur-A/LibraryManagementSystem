package com.library.controller;

import com.library.model.Book;
import com.library.model.Member;

import java.util.ArrayList;
import java.util.List;


public class LibraryController {
    private List<Book> books;
    private List<Member> members;
    
   
    public LibraryController() {
        this.books = new ArrayList<>();
        this.members = new ArrayList<>();
        
        // Add some sample data for testing
        addSampleData();
    }
    
   
    private void addSampleData() {
        // Sample books
        books.add(new Book("B001", "Java Programming", "John Smith"));
        books.add(new Book("B002", "Data Structures", "Jane Johnson"));
        books.add(new Book("B003", "Algorithm Design", "Robert Martin"));
        
        // Sample members
        members.add(new Member("M001", "Ali Yilmaz", "ali@example.com"));
        members.add(new Member("M002", "Ayşe Demir", "ayse@example.com"));
        members.add(new Member("M003", "Sevgi Saygın", "ayse@example.com"));
        members.add(new Member("M003", "Baran Sonmez", "ayse@example.com"));
    }
    
  
    public boolean addBook(Book book) {
        // Check if book with same ID already exists
        for (Book existingBook : books) {
            if (existingBook.getId().equals(book.getId())) {
                return false; // Book with this ID already exists
            }
        }
        return books.add(book);
    }
    
   
    public List<Book> getAllBooks() {
        return new ArrayList<>(books); // Return a copy to prevent modification
    }
    
    public Book getBookById(String id) {
        for (Book book : books) {
            if (book.getId().equals(id)) {
                return book;
            }
        }
        return null;
    }
    
    public boolean deleteBook(String id) {
        Book bookToRemove = null;
        for (Book book : books) {
            if (book.getId().equals(id)) {
                bookToRemove = book;
                break;
            }
        }
        
        if (bookToRemove != null) {
            return books.remove(bookToRemove);
        }
        return false;
    }
    
    
 // Bu metotları LibraryController.java sınıfına ekleyin (eğer daha önce eklemediyseniz):

    /**
     * Search for books by title, author, or ID (partial match)
     * 
     * @param query The search query
     * @return List of matching books
     */
    public List<Book> searchBooks(String query) {
        if (query == null || query.trim().isEmpty()) {
            return getAllBooks();
        }
        
        String lowercaseQuery = query.toLowerCase().trim();
        List<Book> result = new ArrayList<>();
        
        for (Book book : books) {
            if (book.getId().toLowerCase().contains(lowercaseQuery) || 
                book.getTitle().toLowerCase().contains(lowercaseQuery) ||
                book.getAuthor().toLowerCase().contains(lowercaseQuery)) {
                result.add(book);
            }
        }
        
        return result;
    }

    /**
     * Search for members by name, email, or ID (partial match)
     * 
     * @param query The search query
     * @return List of matching members
     */
    public List<Member> searchMembers(String query) {
        if (query == null || query.trim().isEmpty()) {
            return getAllMembers();
        }
        
        String lowercaseQuery = query.toLowerCase().trim();
        List<Member> result = new ArrayList<>();
        
        for (Member member : members) {
            if (member.getId().toLowerCase().contains(lowercaseQuery) || 
                member.getName().toLowerCase().contains(lowercaseQuery) ||
                member.getEmail().toLowerCase().contains(lowercaseQuery)) {
                result.add(member);
            }
        }
        
        return result;
    }
    
    public boolean addMember(Member member) {
        // Check if member with same ID already exists
        for (Member existingMember : members) {
            if (existingMember.getId().equals(member.getId())) {
                return false; // Member with this ID already exists
            }
        }
        return members.add(member);
    }
    
    /**
     * Get all members in the library
     * 
     * @return List of all members
     */
    public List<Member> getAllMembers() {
        return new ArrayList<>(members); 
    }
    
    /**
     * Find a member by ID
     * 
     * @param id The member ID to search for
     * @return The member if found, null otherwise
     */
    public Member getMemberById(String id) {
        for (Member member : members) {
            if (member.getId().equals(id)) {
                return member;
            }
        }
        return null;
    }
    
    /**
     * Delete a member from the library
     * 
     * @param id The ID of the member to delete
     * @return true if deleted successfully, false if not found
     */
    public boolean deleteMember(String id) {
        Member memberToRemove = null;
        for (Member member : members) {
            if (member.getId().equals(id)) {
                memberToRemove = member;
                break;
            }
        }
        
        if (memberToRemove != null) {
            return members.remove(memberToRemove);
        }
        return false;
    }
    
    /**
     * Mark a book as borrowed
     * 
     * @param bookId The ID of the book to borrow
     * @return true if borrowed successfully, false if not available
     */
    public boolean borrowBook(String bookId) {
        Book book = getBookById(bookId);
        if (book != null && book.isAvailable()) {
            book.setAvailable(false);
            return true;
        }
        return false;
    }
    
    /**
     * Mark a book as returned
     * 
     * @param bookId The ID of the book to return
     * @return true if returned successfully, false if not found or already available
     */
    public boolean returnBook(String bookId) {
        Book book = getBookById(bookId);
        if (book != null && !book.isAvailable()) {
            book.setAvailable(true);
            return true;
        }
        return false;
    }
    
    /**
     * Search for books by title or author (partial match)
     * 
     * @param query The search query
     * @return List of matching books
     */
    public List<Book> searchBooks(String query) {
        if (query == null || query.trim().isEmpty()) {
            return getAllBooks();
        }
        
        String lowercaseQuery = query.toLowerCase().trim();
        List<Book> result = new ArrayList<>();
        
        for (Book book : books) {
            if (book.getTitle().toLowerCase().contains(lowercaseQuery) || 
                book.getAuthor().toLowerCase().contains(lowercaseQuery) ||
                book.getId().toLowerCase().contains(lowercaseQuery)) {
                result.add(book);
            }
        }
        
        return result;
    }
    
    /**
     * Search for members by name or email (partial match)
     * 
     * @param query The search query
     * @return List of matching members
     */
    public List<Member> searchMembers(String query) {
        if (query == null || query.trim().isEmpty()) {
            return getAllMembers();
        }
        
        String lowercaseQuery = query.toLowerCase().trim();
        List<Member> result = new ArrayList<>();
        
        for (Member member : members) {
            if (member.getName().toLowerCase().contains(lowercaseQuery) || 
                member.getEmail().toLowerCase().contains(lowercaseQuery) ||
                member.getId().toLowerCase().contains(lowercaseQuery)) {
                result.add(member);
            }
        }
        
        return result;
    }
}